formula_12 <- Formula(RECID_NUM ~ TIME2 + EXPERIMENT)
formula_13 <- Formula(RECID_NUM ~ TIME3 + EXPERIMENT)
# fit models
p_mod_11  <- glm(formula_11, family = poisson, data = sample_data_matched)
qp_mod_11 <- glm(formula_11, family = quasipoisson, data = sample_data_matched)
nb_mod_11 <- glm.nb(formula_11, data = sample_data_matched)
hp_mod_11 <- hurdle(formula_11, data = sample_data_matched)
hnb_mod_11 <- hurdle(formula_11, data = sample_data_matched, dist = "negbin")
zip_mod_11 <- zeroinfl(formula_11, data = sample_data_matched)
# zip_mod_11 <- zeroinfl(formula_11, data = sample_data_matched)
zinb_mod_11 <- zeroinfl(formula_11, data = sample_data_matched, dist = "negbin")
p_mod_12  <- glm(formula_12, family = poisson, data = sample_data_matched)
qp_mod_12 <- glm(formula_12, family = quasipoisson, data = sample_data_matched)
nb_mod_12 <- glm.nb(formula_12, data = sample_data_matched)
hp_mod_12 <- hurdle(formula_12, data = sample_data_matched)
hnb_mod_12 <- hurdle(formula_12, data = sample_data_matched, dist = "negbin")
zip_mod_12 <- zeroinfl(formula_12, data = sample_data_matched)
zinb_mod_12 <- zeroinfl(formula_12, data = sample_data_matched, dist = "negbin")
p_mod_13  <- glm(formula_13, family = poisson, data = sample_data_matched)
qp_mod_13 <- glm(formula_13, family = quasipoisson, data = sample_data_matched)
nb_mod_13 <- glm.nb(formula_13, data = sample_data_matched)
hp_mod_13 <- hurdle(formula_13, data = sample_data_matched)
hnb_mod_13 <- hurdle(formula_13, data = sample_data_matched, dist = "negbin")
zip_mod_13 <- zeroinfl(formula_13, data = sample_data_matched)
zinb_mod_13 <- zeroinfl(formula_13, data = sample_data_matched, dist = "negbin")
# get model lists
mod_list_11 <- list(p_mod_11, qp_mod_11, nb_mod_11, hp_mod_11, hnb_mod_11, NA, NA)
mod_list_12 <- list(p_mod_12, qp_mod_12, nb_mod_12, hp_mod_12, hnb_mod_12, zip_mod_12, zinb_mod_12)
mod_list_13 <- list(p_mod_13, qp_mod_13, nb_mod_13, hp_mod_13, hnb_mod_13, zip_mod_13, zinb_mod_13)
get_plots(mod_list_11)
get_plots(mod_list_12)
get_plots(mod_list_13)
# define formulae
formula_21 <- update(formula_11, ~ . + SEX + RACE + FQA_ARRAGE + FQA_COOK)
formula_22 <- update(formula_12, ~ . + SEX + RACE + FQA_ARRAGE + FQA_COOK)
formula_23 <- update(formula_13, ~ . + SEX + RACE + FQA_ARRAGE + FQA_COOK)
# fit models
p_mod_21  <- glm(formula_21, family = poisson, data = sample_data_matched)
qp_mod_21 <- glm(formula_21, family = quasipoisson, data = sample_data_matched)
nb_mod_21 <- glm.nb(formula_21, data = sample_data_matched)
hp_mod_21 <- hurdle(formula_21, data = sample_data_matched)
# hp_mod_21 <- hurdle(formula_21, data = sample_data_matched)
hnb_mod_21 <- hurdle(formula_21, data = sample_data_matched, dist = "negbin")
install.packages('revealjs')
?kable_styling()
?kableExtra::kable_styling()
knitr::include_graphics()
knitr::include_graphics()?
?knitr::include_graphics
?knitr::kable
vignette("ggplot2")
vignette(ggplot2)
vignette(dplyr)
vignette('dplyr')
librery(dplyr)
globalenv
globalenv()
a <- 1
globalenv()
print(globalenv())
?sample()
?dplyr::sample_n
?split()
?sample()
a <- c(1,2,3)
a <- 1:100
a
sample(a)
sample(a, 10)
seq_len(100)
?seq_len
library(icjiar)
ispcrime
ispcrime %>%
filter(murder > 0) %>%
head()
?sub()
substr()
?substr()
head(regions)
?read.csv
?readr::read_table
?write.csv()
?read.csv()
?write.csv
?readxl::read_excel
?readxl::write_excel
?feather::read_feather
stringr::str_to_upper(c("hi", "hello"))
?toupper
stringr::str_to_upper(c("hi, how are you", "hello"))
stringr::str_to_title(c("hi, how are you", "hello"))
?trimws
?substr()
?sub()
?regmatches()
?grep()
?concat()
concat("1", "2")
concatenate("1", "2")
?toupper
?trimws
?paste
?grepl
?substr
as.Date
?as.Date
?as.POSIXct
?Date
Date(20)
Sys.Date()
as.POSIXct("2005-12-31 23:59:60")
a <- 2005-12-31 23:59:60
a <- as.POSIXct("2005-12-31 23:59:60")
a
class(a)
as.numeric(a)
as.character(a)
?fread()
?data.table::fread()
?read_csv()
?readr::read_csv()
?data.table::fread()
?readxl::read_excel
iris
library(ggplot2)
ggplot(iris) + geom_point(aes(x = Species, y = Sepal.Length))
ggplot(iris) + geom_line(aes(x = Species, y = Sepal.Length))
ggplot(iris) + geom_line(aes(y = Species, x = Sepal.Length))
?gather()
?dplyr::gather()
?tidyr::gather()
icjiar::ispcrime
ispcrime %>% filter(county == "Cook")
library(dplyr)
ispcrime %>% filter(county == "Cook")
library(icjiar)
ispcrime %>% filter(county == "Cook")
class(ispcrime$year)
class(ispcrime$violentCrime)
?geom_col()
?ggtitle
?lims
library(icjira)
library(icjiar)
a <- lm(violentCrime, propertyCrime, ispcrime)
a <- lm(violentCrime, propertyCrime, ispcrimes)
a <- lm(violentCrime ~ propertyCrime, ispcrimes)
a <- lm(violentCrime ~ propertyCrime, ispcrime)
a
summary(a)
print(a)
?lm
class(a)
x <- seq(1, 100)
y <- seq(1, 100)
par(2, 2)
plot(x, y)
plot(log(x), y)
?par
par(nfrow(2, 2))
plot(x, y)
plot(log(x), y)
plot(sqrt(x), y)
plot(scale(x), y)
par(mfrow(2, 2))
plot(x, y)
plot(log(x), y)
plot(sqrt(x), y)
plot(scale(x), y)
par(mfrow = c(2, 2))
plot(x, y)
plot(log(x), y)
plot(sqrt(x), y)
plot(scale(x), y)
plot(x, y)
plot(x, log(y))
plot(x, sqrt(y))
plot(x, scale(y))
abline()
par(mfrow(2, 2))
plot(x, y)
plot(log(x), y)
plot(sqrt(x), y)
plot(scale(x), y)
abline(a = 0, b = 1)
par(mfrow = c(2, 2))
plot(x, y)
plot(log(x), y)
plot(sqrt(x), y)
plot(scale(x), y)
abline(a = 0, b = 1)
?abline
plot(x, y)
abline(a = 0, b = 1)
plot(x, y)
abline(a = 0, b = 1, col = "red")
par(mfrow = c(2, 2))
plot(x, y)
abline(a = 0, b = 1, col = "red")
plot(log(x), y)
abline(a = 0, b = 1, col = "red")
plot(sqrt(x), y)
abline(a = 0, b = 1, col = "red")
plot(scale(x), y)
abline(a = 0, b = 1, col = "red")
par(mfrow(2, 2))
plot(x, y)
abline(a = 0, b = 1, col = "red")
plot(x, log(y))
abline(a = 0, b = 1, col = "red")
plot(x, sqrt(y))
abline(a = 0, b = 1, col = "red")
plot(x, scale(y))
abline(a = 0, b = 1, col = "red")
par(mfrow = c(2, 2))
plot(x, y)
abline(a = 0, b = 1, col = "red")
plot(x, log(y))
abline(a = 0, b = 1, col = "red")
plot(x, sqrt(y))
abline(a = 0, b = 1, col = "red")
plot(x, scale(y))
abline(a = 0, b = 1, col = "red")
par(mfrow(1,1))
par(mfrow = c(1,1))
plot(x, y)
abline(lm(y ~ x), col = "red")
abline(lm(y ~ log(x)), col = "red")
abline(lm(y ~ sqrt(x)), col = "red")
abline(lm(y ~ scale(x)), col = "red")
x <- seq(1, 10)
y <- seq(1, 10)
# par(mfrow = c(2, 2))
plot(x, y)
abline(lm(y ~ x), col = "red")
abline(lm(y ~ log(x)), col = "red")
abline(lm(y ~ sqrt(x)), col = "red")
abline(lm(y ~ scale(x)), col = "red")
x <- seq(1, 10, 0.1)
y <- seq(1, 10, 0.1)
# par(mfrow = c(2, 2))
plot(x, y)
abline(lm(y ~ x), col = "red")
abline(lm(y ~ log(x)), col = "red")
abline(lm(y ~ sqrt(x)), col = "red")
abline(lm(y ~ scale(x)), col = "red")
plot(x, y)
abline(lm(y ~ x), col = "red")
abline(lm(y ~ log(x)), col = "red")
abline(lm(y ~ log(x)), col = "blue")
abline(lm(y ~ sqrt(x)), col = "green")
abline(lm(y ~ sqrt(x)), col = "darkgreen")
?plot()
plot(x, y)
abline(lm(y ~ x), col = "red")
abline(lm(y ~ log(x)), col = "blue")
abline(lm(y ~ sqrt(x)), col = "dark red")
abline(lm(y ~ scale(x)), col = "dark green")
plot(x, y)
abline(lm(y ~ x), col = "red")
abline(lm(y ~ log(x)), col = "blue")
abline(lm(y ~ sqrt(x)), col = "dark yellow")
abline(lm(y ~ scale(x)), col = "dark green")
plot(x, y)
abline(lm(y ~ x), col = "red")
abline(lm(y ~ log(x)), col = "blue")
abline(lm(y ~ sqrt(x)), col = "brown")
abline(lm(y ~ scale(x)), col = "dark green")
x <- seq(1, 100, 0.1)
y <- seq(1, 100, 0.1)
# par(mfrow = c(2, 2))
plot(x, y)
abline(lm(y ~ x), col = "red")
abline(lm(y ~ log(x)), col = "blue")
abline(lm(y ~ sqrt(x)), col = "brown")
abline(lm(y ~ scale(x)), col = "dark green")
plot(x, y)
abline(lm(y ~ x), col = "red")
plot(log(x), y)
abline(a = 0, b = 1, col = "red")
plot(sqrt(x), y)
abline(a = 0, b = 1, col = "red")
plot(scale(x), y)
abline(a = 0, b = 1, col = "red")
par(mfrow = c(2, 2))
plot(x, y)
abline(lm(y ~ x), col = "red")
plot(log(x), y)
abline(a = 0, b = 1, col = "red")
plot(sqrt(x), y)
abline(a = 0, b = 1, col = "red")
plot(scale(x), y)
abline(a = 0, b = 1, col = "red")
x <- seq(1, 10, 0.2)
y <- seq(1, 10, 0.2)
par(mfrow = c(2, 2))
plot(x, y)
abline(lm(y ~ x), col = "red")
plot(log(x), y)
abline(a = 0, b = 1, col = "red")
plot(sqrt(x), y)
abline(a = 0, b = 1, col = "red")
plot(scale(x), y)
abline(a = 0, b = 1, col = "red")
x <- seq(1, 100, 2)
y <- seq(1, 100, 2)
par(mfrow = c(2, 2))
plot(x, y)
abline(lm(y ~ x), col = "red")
plot(log(x), y)
abline(a = 0, b = 1, col = "red")
plot(sqrt(x), y)
abline(a = 0, b = 1, col = "red")
plot(scale(x), y)
abline(a = 0, b = 1, col = "red")
plot(x, y)
abline(a = 0, b = 1, col = "red")
plot(x, log(y))
abline(a = 0, b = 1, col = "red")
plot(x, sqrt(y))
abline(a = 0, b = 1, col = "red")
plot(x, scale(y))
abline(a = 0, b = 1, col = "red")
?scale()
log10
?log()
?broom::tidy
broom::tidy(a)
?broom:glance
?broom::glance
?modelr::resample
?modelr::bootstrap
?modelr::resample_partition
?AIC
?BIC
?logLik()
?loglin()
?logLik()
?nlm
?lrtest
?broom::augment
?help(family)
help(family)
help(glm)
glm(violentCrime ~ propertyCrime, ispcrime)
glm(violentCrime ~ propertyCrime, ispcrime, family = binomial)
glm(scale(violentCrime) ~ propertyCrime, ispcrime, family = binomial)
glm(scale(violentCrime) ~ propertyCrime, ispcrime, family = poisson)
df <- data.frame(
my_fruits = c("apple", "banana", "clementine"),
my_animals = c("dogs", "cats", "llamas"),
my_flavors = c("chocolate", "vanila", "cookie dough"),
my_colors = c("red", "green", "orange"),
my_cities = c("Chicago", "New Work", "Los Angeles")
)
DT::datatable(df)
?DT:datatable
?DT::datatable
DT::datatable(df, width=500)
DT::datatable(df, width=500, height=300)
DT::datatable(df, width=500)
DT::datatable(df, width=600)
DT::datatable(df, width=600, height=300)
?prop.table
my_data <- ispcrime %>%
left_join(regions) %>%
select(
region,
viol = violentCrime,
prop = propertyCrime
) %>%
mutate(
high_viol = ifelse(viol > mean(viol, na.rm = TRUE), 1, 0),
high_prop = ifelse(prop > mean(prop, na.rm = TRUE), 1, 0)
)
library(dplyr)
my_tbl <- table(
region = my_data$region,
hviol = my_data$high_viol
)
my_data <- ispcrime %>%
left_join(regions) %>%
select(
region,
viol = violentCrime,
prop = propertyCrime
) %>%
mutate(
high_viol = ifelse(viol > mean(viol, na.rm = TRUE), 1, 0),
high_prop = ifelse(prop > mean(prop, na.rm = TRUE), 1, 0)
)
library(icjiar)
my_data <- ispcrime %>%
left_join(regions) %>%
select(
region,
viol = violentCrime,
prop = propertyCrime
) %>%
mutate(
high_viol = ifelse(viol > mean(viol, na.rm = TRUE), 1, 0),
high_prop = ifelse(prop > mean(prop, na.rm = TRUE), 1, 0)
)
my_tbl <- table(
region = my_data$region,
hviol = my_data$high_viol
)
prop.table(my_tbl, c(1,2))
prop.table(my_tbl, c(1))
prop.table(my_tbl, c(2))
prop.table(my_tbl
)
prop.table(my_tbl, 1:2)
class(xtabs(~ region, my_data))
class(prop.table(my_tbl, c(2)))
arrange(ispcrime, desc(county), desc(year))
knit_with_parameters('X:/_icjia_github/icjia-r-workshop/notes/module6_notes1.Rmd')
library(knitr)
opts_chunk$set(echo = TRUE)
include_graphics("../images/rmarkdown10.png")
shiny::runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
?ggplot
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
iris[, "Sepal.Width"]
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
data.frame()
data.frame(
x = 1:10,
y = 2:11,
color = NULL
)
a <- data.frame(
x = 1:10,
y = 2:11
)
a
a$x <- NULL
a
a <- data.frame(
x = 1:10,
y = 2:11
)
a
ggplot(a, aes(x, y, color = NULL))
ggplot(a, aes(x, y, color = NULL)) + geom_point()
ggplot(a, aes(x, y, color = hi)) + geom_point()
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
?theme_bw
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
mtcars$disp
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
colors()
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
?Sys.sleep
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
runApp('X:/_icjia_github/icjia-dashboard-dataexp')
getwd()
setwd("X")
setwd("X:/")
getwd()
setwd("X:/_icjia_github/icjia_dashboard_dataexp")
setwd("X:/_icjia_github")
setwd("X:/_icjia_github/icjia-dashboard-dataexp")
ls
list.fileS()
list.files()
read.csv("test.csv")
a <- read.csv("test.csv")
sapply(a, class)
runApp()
?readxl::read_excel
runApp()
shinycssloaders::withSpinner()
?shinycssloaders::withSpinner()
install.packages('shinyjs')
runApp()
runApp()
?shinyjs::disable
runApp()
runApp()
runApp()
last_plot()
last_plot()
last_plot()
ggplot2::last_plot()
shiny::runApp()
runApp()
